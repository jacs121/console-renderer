[
    {
        "label": "ConsoleRenderer",
        "importPath": "renderer",
        "description": "renderer",
        "isExtraImport": true,
        "detail": "renderer",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "vectors",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "vectors",
        "description": "vectors",
        "detail": "vectors",
        "documentation": {}
    },
    {
        "label": "Vector2d",
        "importPath": "vectors",
        "description": "vectors",
        "isExtraImport": true,
        "detail": "vectors",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "textures",
        "description": "textures",
        "isExtraImport": true,
        "detail": "textures",
        "documentation": {}
    },
    {
        "label": "Texture",
        "importPath": "textures",
        "description": "textures",
        "isExtraImport": true,
        "detail": "textures",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "changedSize",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def changedSize(size):\n    global shadows, x, y\n    x = min(size[0], x)\n    y = min(size[1], y)\n    for shadowIndex in range(len(shadows)):\n        if shadows[shadowIndex] != None:\n            shadows[shadowIndex] = (min(shadows[shadowIndex][0], size[0]), min(shadows[shadowIndex][1], size[1]), shadows[shadowIndex][2])\ndef tick(size):\n    global color, x, y, xm ,ym, maxShadow, shadows\n    screen = [[(0,0,0) for _ in range(size[0]+1)] for _ in range(size[1]*2+1)]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "tick",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def tick(size):\n    global color, x, y, xm ,ym, maxShadow, shadows\n    screen = [[(0,0,0) for _ in range(size[0]+1)] for _ in range(size[1]*2+1)]\n    screen[y][x] = color\n    screen[y][x+1] = color\n    screen[y][x+2] = color\n    screen[y+1][x] = color\n    screen[y+1][x+1] = color\n    screen[y+1][x+2] = color\n    screen[y+2][x] = color",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "x = 0\ny = 0\nxm = 1\nym = 1\ncolor = (random.randint(20, 255), random.randint(20, 255), random.randint(20, 255))\nmaxShadow = 100\nshadows = [None]*maxShadow\ndef changedSize(size):\n    global shadows, x, y\n    x = min(size[0], x)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "y = 0\nxm = 1\nym = 1\ncolor = (random.randint(20, 255), random.randint(20, 255), random.randint(20, 255))\nmaxShadow = 100\nshadows = [None]*maxShadow\ndef changedSize(size):\n    global shadows, x, y\n    x = min(size[0], x)\n    y = min(size[1], y)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "xm",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "xm = 1\nym = 1\ncolor = (random.randint(20, 255), random.randint(20, 255), random.randint(20, 255))\nmaxShadow = 100\nshadows = [None]*maxShadow\ndef changedSize(size):\n    global shadows, x, y\n    x = min(size[0], x)\n    y = min(size[1], y)\n    for shadowIndex in range(len(shadows)):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ym",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ym = 1\ncolor = (random.randint(20, 255), random.randint(20, 255), random.randint(20, 255))\nmaxShadow = 100\nshadows = [None]*maxShadow\ndef changedSize(size):\n    global shadows, x, y\n    x = min(size[0], x)\n    y = min(size[1], y)\n    for shadowIndex in range(len(shadows)):\n        if shadows[shadowIndex] != None:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "color = (random.randint(20, 255), random.randint(20, 255), random.randint(20, 255))\nmaxShadow = 100\nshadows = [None]*maxShadow\ndef changedSize(size):\n    global shadows, x, y\n    x = min(size[0], x)\n    y = min(size[1], y)\n    for shadowIndex in range(len(shadows)):\n        if shadows[shadowIndex] != None:\n            shadows[shadowIndex] = (min(shadows[shadowIndex][0], size[0]), min(shadows[shadowIndex][1], size[1]), shadows[shadowIndex][2])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "maxShadow",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "maxShadow = 100\nshadows = [None]*maxShadow\ndef changedSize(size):\n    global shadows, x, y\n    x = min(size[0], x)\n    y = min(size[1], y)\n    for shadowIndex in range(len(shadows)):\n        if shadows[shadowIndex] != None:\n            shadows[shadowIndex] = (min(shadows[shadowIndex][0], size[0]), min(shadows[shadowIndex][1], size[1]), shadows[shadowIndex][2])\ndef tick(size):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "shadows",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "shadows = [None]*maxShadow\ndef changedSize(size):\n    global shadows, x, y\n    x = min(size[0], x)\n    y = min(size[1], y)\n    for shadowIndex in range(len(shadows)):\n        if shadows[shadowIndex] != None:\n            shadows[shadowIndex] = (min(shadows[shadowIndex][0], size[0]), min(shadows[shadowIndex][1], size[1]), shadows[shadowIndex][2])\ndef tick(size):\n    global color, x, y, xm ,ym, maxShadow, shadows",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "renderer",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "renderer = ConsoleRenderer(tick, changedSize)\nrenderer.run(60)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "renderObject2D",
        "kind": 6,
        "importPath": "renderer",
        "description": "renderer",
        "peekOfCode": "class renderObject2D:\n    def __init__(self, **kwargs):\n        keys = kwargs.keys()\n        if \"texture\" in list(keys):\n            self.__texture__ = kwargs[\"texture\"]\n        if \"color\" in list(keys):\n            self.__texture__ = Texture(kwargs[\"color\"])\n        else:\n            self.__texture__ = Texture(Color(255,255,255))\n        if \"right\" in list(keys) and \"top\" in list(keys) and \"left\" in list(keys) and \"right\" in list(keys):",
        "detail": "renderer",
        "documentation": {}
    },
    {
        "label": "ConsoleRenderer",
        "kind": 6,
        "importPath": "renderer",
        "description": "renderer",
        "peekOfCode": "class ConsoleRenderer():\n    def __init__(self, tick:types.FunctionType = None, sizeChange:types.FunctionType = None):\n        colorama.init()\n        self.running = False\n        self.onTick = tick\n        self.onSizeChange = sizeChange\n    def onTick(self, size: tuple[int, int]):\n        return [[]]\n    def stop(self):\n        self.running = False",
        "detail": "renderer",
        "documentation": {}
    },
    {
        "label": "REPEAT_MODE",
        "kind": 6,
        "importPath": "textures",
        "description": "textures",
        "peekOfCode": "class REPEAT_MODE(str, Enum):\n    INFINITE = \"INFINITE\"\n    FINITE = \"FINITE\"\n    DISABLE = \"DISABLE\"\nclass Color:\n    mode: _ColorMode\n    def __init__(self, mode: _ColorMode, *args: _Number):\n        self.mode = mode.upper()  # type: ignore\n        if self.mode == \"RGB\":\n            if len(args) != 3:",
        "detail": "textures",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "textures",
        "description": "textures",
        "peekOfCode": "class Color:\n    mode: _ColorMode\n    def __init__(self, mode: _ColorMode, *args: _Number):\n        self.mode = mode.upper()  # type: ignore\n        if self.mode == \"RGB\":\n            if len(args) != 3:\n                raise ValueError(\"RGB mode requires 3 values\")\n            self.r: _Number\n            self.g: _Number\n            self.b: _Number",
        "detail": "textures",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "textures",
        "description": "textures",
        "peekOfCode": "class Image():\n    pass\nclass Texture():\n    def __init__(self, data: Color | Image, repeatMode: Optional[REPEAT_MODE] = None):\n        self.__repeat_mode__ = repeatMode\n        if data == Color:\n            self.__size__ = Vector2d(1,1)\n            if self.__repeat_mode__ == None:\n                self.__repeat_mode__ = REPEAT_MODE.INFINITE\n            self.met = [[data]]",
        "detail": "textures",
        "documentation": {}
    },
    {
        "label": "Texture",
        "kind": 6,
        "importPath": "textures",
        "description": "textures",
        "peekOfCode": "class Texture():\n    def __init__(self, data: Color | Image, repeatMode: Optional[REPEAT_MODE] = None):\n        self.__repeat_mode__ = repeatMode\n        if data == Color:\n            self.__size__ = Vector2d(1,1)\n            if self.__repeat_mode__ == None:\n                self.__repeat_mode__ = REPEAT_MODE.INFINITE\n            self.met = [[data]]\n        elif data == Image:\n            if self.__repeat_mode__ == None:",
        "detail": "textures",
        "documentation": {}
    },
    {
        "label": "_ColorMode",
        "kind": 5,
        "importPath": "textures",
        "description": "textures",
        "peekOfCode": "_ColorMode = Literal[\"RGB\", \"RGBA\", \"HSV\", \"GRAY\"]\n_Number = Union[int, float]\nclass REPEAT_MODE(str, Enum):\n    INFINITE = \"INFINITE\"\n    FINITE = \"FINITE\"\n    DISABLE = \"DISABLE\"\nclass Color:\n    mode: _ColorMode\n    def __init__(self, mode: _ColorMode, *args: _Number):\n        self.mode = mode.upper()  # type: ignore",
        "detail": "textures",
        "documentation": {}
    },
    {
        "label": "_Number",
        "kind": 5,
        "importPath": "textures",
        "description": "textures",
        "peekOfCode": "_Number = Union[int, float]\nclass REPEAT_MODE(str, Enum):\n    INFINITE = \"INFINITE\"\n    FINITE = \"FINITE\"\n    DISABLE = \"DISABLE\"\nclass Color:\n    mode: _ColorMode\n    def __init__(self, mode: _ColorMode, *args: _Number):\n        self.mode = mode.upper()  # type: ignore\n        if self.mode == \"RGB\":",
        "detail": "textures",
        "documentation": {}
    },
    {
        "label": "Vector2d",
        "kind": 6,
        "importPath": "vectors",
        "description": "vectors",
        "peekOfCode": "class Vector2d:\n    num_of_vectors = 0\n    def __init__(self, x: int | float = 0, y: int | float = 0):\n        self.x = x\n        self.y = y\n        Vector2d.num_of_vectors += 1\n    def __add__(self, b):\n        return Vector2d(self.x + b.x, self.y + b.y)\n    def __sub__(self, b):\n        return Vector2d(self.x - b.x, self.y - b.y)",
        "detail": "vectors",
        "documentation": {}
    },
    {
        "label": "Vector3d",
        "kind": 6,
        "importPath": "vectors",
        "description": "vectors",
        "peekOfCode": "class Vector3d:\n    num_of_vectors = 0\n    def __init__(self, x: int | float = 0, y: int | float = 0, z: int | float = 0):\n        self.x = x\n        self.y = y\n        self.z = z\n        Vector3d.num_of_vectors += 1\n    def __add__(self, b):\n        return Vector3d(self.x + b.x, self.y + b.y, self.z + b.z)\n    def __sub__(self, b):",
        "detail": "vectors",
        "documentation": {}
    }
]