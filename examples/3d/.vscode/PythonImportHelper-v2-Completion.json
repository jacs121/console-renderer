[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "termgfx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "termgfx",
        "description": "termgfx",
        "detail": "termgfx",
        "documentation": {}
    },
    {
        "label": "ConsoleRenderer",
        "importPath": "termgfx",
        "description": "termgfx",
        "isExtraImport": true,
        "detail": "termgfx",
        "documentation": {}
    },
    {
        "label": "Vector2",
        "importPath": "termgfx",
        "description": "termgfx",
        "isExtraImport": true,
        "detail": "termgfx",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "termgfx",
        "description": "termgfx",
        "isExtraImport": true,
        "detail": "termgfx",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "termgfx",
        "description": "termgfx",
        "isExtraImport": true,
        "detail": "termgfx",
        "documentation": {}
    },
    {
        "label": "RGB_RED",
        "importPath": "termgfx",
        "description": "termgfx",
        "isExtraImport": true,
        "detail": "termgfx",
        "documentation": {}
    },
    {
        "label": "RGB_GREEN",
        "importPath": "termgfx",
        "description": "termgfx",
        "isExtraImport": true,
        "detail": "termgfx",
        "documentation": {}
    },
    {
        "label": "RGB_BLUE",
        "importPath": "termgfx",
        "description": "termgfx",
        "isExtraImport": true,
        "detail": "termgfx",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cProfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cProfile",
        "description": "cProfile",
        "detail": "cProfile",
        "documentation": {}
    },
    {
        "label": "pstats",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pstats",
        "description": "pstats",
        "detail": "pstats",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "termgfx.textures",
        "description": "termgfx.textures",
        "isExtraImport": true,
        "detail": "termgfx.textures",
        "documentation": {}
    },
    {
        "label": "basic_tick",
        "kind": 2,
        "importPath": "termgfx.examples.basic_demo",
        "description": "termgfx.examples.basic_demo",
        "peekOfCode": "def basic_tick(resolution: Vector2):\n    # Create a simple pattern\n    img = Image(resolution, Color(\"RGB\", [50, 50, 100]))\n    # Draw a red square\n    for y in range(10):\n        for x in range(10):\n            img.set_pixel(Vector2(x + 5, y + 5), RGB_RED)\n    # Draw a green line\n    for i in range(min(20, resolution.x)):\n        img.set_pixel(Vector2(i + 10, 20), RGB_GREEN)",
        "detail": "termgfx.examples.basic_demo",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "class Color:\n    def __init__(self, mode: _ColorMode, val: list[_Number]):\n        self.mode = mode.upper()\n        self._components = []\n        if self.mode == \"RGB\":\n            if len(val) != 3:\n                raise ValueError(\"RGB mode requires 3 values\")\n            self._components = [int(val[0]), int(val[1]), int(val[2])]\n            self.r, self.g, self.b = self._components\n        elif self.mode == \"RGBA\":",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "_Number",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "_Number = Union[int, float]\n_ColorMode = Literal[\"RGB\", \"RGBA\", \"HSV\", \"GRAY\"]\nclass Color:\n    def __init__(self, mode: _ColorMode, val: list[_Number]):\n        self.mode = mode.upper()\n        self._components = []\n        if self.mode == \"RGB\":\n            if len(val) != 3:\n                raise ValueError(\"RGB mode requires 3 values\")\n            self._components = [int(val[0]), int(val[1]), int(val[2])]",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "_ColorMode",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "_ColorMode = Literal[\"RGB\", \"RGBA\", \"HSV\", \"GRAY\"]\nclass Color:\n    def __init__(self, mode: _ColorMode, val: list[_Number]):\n        self.mode = mode.upper()\n        self._components = []\n        if self.mode == \"RGB\":\n            if len(val) != 3:\n                raise ValueError(\"RGB mode requires 3 values\")\n            self._components = [int(val[0]), int(val[1]), int(val[2])]\n            self.r, self.g, self.b = self._components",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_RED",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_RED = Color(\"RGB\", [255, 0, 0])\nRGB_GREEN = Color(\"RGB\", [0, 255, 0])\nRGB_BLUE = Color(\"RGB\", [0, 0, 255])\nRGB_LIGHTBLUE = Color(\"RGB\", [0, 255, 255])\nRGB_PURPLE = Color(\"RGB\", [255, 0, 255])\nRGB_YELLOW = Color(\"RGB\", [255, 255, 0])\nRGB_WHITE = Color(\"RGB\", [255, 255, 255])\nRGB_BLACK = Color(\"RGB\", [0, 0, 0])\nRGB_GRAY = Color(\"RGB\", [255//2, 255//2, 255//2])\nRGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_GREEN",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_GREEN = Color(\"RGB\", [0, 255, 0])\nRGB_BLUE = Color(\"RGB\", [0, 0, 255])\nRGB_LIGHTBLUE = Color(\"RGB\", [0, 255, 255])\nRGB_PURPLE = Color(\"RGB\", [255, 0, 255])\nRGB_YELLOW = Color(\"RGB\", [255, 255, 0])\nRGB_WHITE = Color(\"RGB\", [255, 255, 255])\nRGB_BLACK = Color(\"RGB\", [0, 0, 0])\nRGB_GRAY = Color(\"RGB\", [255//2, 255//2, 255//2])\nRGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])\nRGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_BLUE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_BLUE = Color(\"RGB\", [0, 0, 255])\nRGB_LIGHTBLUE = Color(\"RGB\", [0, 255, 255])\nRGB_PURPLE = Color(\"RGB\", [255, 0, 255])\nRGB_YELLOW = Color(\"RGB\", [255, 255, 0])\nRGB_WHITE = Color(\"RGB\", [255, 255, 255])\nRGB_BLACK = Color(\"RGB\", [0, 0, 0])\nRGB_GRAY = Color(\"RGB\", [255//2, 255//2, 255//2])\nRGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])\nRGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])\nRGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_LIGHTBLUE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_LIGHTBLUE = Color(\"RGB\", [0, 255, 255])\nRGB_PURPLE = Color(\"RGB\", [255, 0, 255])\nRGB_YELLOW = Color(\"RGB\", [255, 255, 0])\nRGB_WHITE = Color(\"RGB\", [255, 255, 255])\nRGB_BLACK = Color(\"RGB\", [0, 0, 0])\nRGB_GRAY = Color(\"RGB\", [255//2, 255//2, 255//2])\nRGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])\nRGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])\nRGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])\nRGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_PURPLE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_PURPLE = Color(\"RGB\", [255, 0, 255])\nRGB_YELLOW = Color(\"RGB\", [255, 255, 0])\nRGB_WHITE = Color(\"RGB\", [255, 255, 255])\nRGB_BLACK = Color(\"RGB\", [0, 0, 0])\nRGB_GRAY = Color(\"RGB\", [255//2, 255//2, 255//2])\nRGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])\nRGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])\nRGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])\nRGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])\nRGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_YELLOW",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_YELLOW = Color(\"RGB\", [255, 255, 0])\nRGB_WHITE = Color(\"RGB\", [255, 255, 255])\nRGB_BLACK = Color(\"RGB\", [0, 0, 0])\nRGB_GRAY = Color(\"RGB\", [255//2, 255//2, 255//2])\nRGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])\nRGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])\nRGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])\nRGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])\nRGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])\nRGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_WHITE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_WHITE = Color(\"RGB\", [255, 255, 255])\nRGB_BLACK = Color(\"RGB\", [0, 0, 0])\nRGB_GRAY = Color(\"RGB\", [255//2, 255//2, 255//2])\nRGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])\nRGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])\nRGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])\nRGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])\nRGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])\nRGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])\nRGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_BLACK",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_BLACK = Color(\"RGB\", [0, 0, 0])\nRGB_GRAY = Color(\"RGB\", [255//2, 255//2, 255//2])\nRGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])\nRGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])\nRGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])\nRGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])\nRGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])\nRGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])\nRGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])\nRGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_GRAY",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_GRAY = Color(\"RGB\", [255//2, 255//2, 255//2])\nRGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])\nRGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])\nRGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])\nRGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])\nRGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])\nRGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])\nRGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])\nRGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])\nRGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_DARKBLUE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_DARKBLUE = Color(\"RGB\", [0, 0, 255//2])\nRGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])\nRGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])\nRGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])\nRGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])\nRGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])\nRGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])\nRGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])\nRGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])\nRGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_DARKRED",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_DARKRED = Color(\"RGB\", [255//2, 0, 0])\nRGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])\nRGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])\nRGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])\nRGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])\nRGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])\nRGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])\nRGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])\nRGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])\nRGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_DARKGREEN",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_DARKGREEN = Color(\"RGB\", [0, 255//2, 0])\nRGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])\nRGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])\nRGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])\nRGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])\nRGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])\nRGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])\nRGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])\nRGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])\nRGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGB_DARKPURPLE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGB_DARKPURPLE = Color(\"RGB\", [255//2, 0, 255//2])\nRGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])\nRGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])\nRGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])\nRGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])\nRGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])\nRGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])\nRGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])\nRGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])\nRGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_RED",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_RED = Color(\"RGBA\", [255, 0, 0, 1.0])\nRGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])\nRGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])\nRGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])\nRGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])\nRGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])\nRGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])\nRGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])\nRGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])\nRGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_GREEN",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_GREEN = Color(\"RGBA\", [0, 255, 0, 1.0])\nRGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])\nRGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])\nRGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])\nRGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])\nRGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])\nRGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])\nRGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])\nRGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])\nRGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_BLUE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_BLUE = Color(\"RGBA\", [0, 0, 255, 1.0])\nRGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])\nRGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])\nRGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])\nRGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])\nRGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])\nRGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])\nRGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])\nRGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])\nRGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_PURPLE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_PURPLE = Color(\"RGBA\", [255, 0, 255, 1.0])\nRGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])\nRGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])\nRGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])\nRGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])\nRGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])\nRGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])\nRGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])\nRGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_LIGHTBLUE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_LIGHTBLUE = Color(\"RGBA\", [0, 255, 255, 1.0])\nRGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])\nRGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])\nRGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])\nRGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])\nRGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])\nRGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])\nRGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_YELLOW",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_YELLOW = Color(\"RGBA\", [255, 255, 0, 1.0])\nRGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])\nRGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])\nRGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])\nRGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])\nRGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])\nRGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_WHITE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_WHITE = Color(\"RGBA\", [255, 255, 255, 1.0])\nRGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])\nRGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])\nRGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])\nRGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])\nRGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_BLACK",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_BLACK = Color(\"RGBA\", [0, 0, 0, 1.0])\nRGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])\nRGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])\nRGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])\nRGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_DARKBLUE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_DARKBLUE = Color(\"RGBA\", [0, 0, 255//2, 1.0])\nRGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])\nRGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])\nRGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_DARKRED",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_DARKRED = Color(\"RGBA\", [255//2, 0, 0, 1.0])\nRGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])\nRGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_DARKGREEN",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_DARKGREEN = Color(\"RGBA\", [0, 255//2, 0, 1.0])\nRGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "RGBA_DARKPURPLE",
        "kind": 5,
        "importPath": "termgfx.colors",
        "description": "termgfx.colors",
        "peekOfCode": "RGBA_DARKPURPLE = Color(\"RGBA\", [255//2, 0, 255//2, 1.0])",
        "detail": "termgfx.colors",
        "documentation": {}
    },
    {
        "label": "ConsoleRenderer",
        "kind": 6,
        "importPath": "termgfx.renderer",
        "description": "termgfx.renderer",
        "peekOfCode": "class ConsoleRenderer():\n    def __init__(self, tick: Optional[types.FunctionType] = None, \n                 sizeChange: Optional[types.FunctionType] = None, \n                 bg: Color = Color(\"RGB\", [0, 0, 0]),\n                 disableConsoleCursor: bool = True, threadCount: int = min(os.cpu_count(), 6)):\n        colorama.just_fix_windows_console()\n        self.__running__ = False\n        self.onTick = tick\n        self.onSizeChange = sizeChange\n        self.__bg__ = bg",
        "detail": "termgfx.renderer",
        "documentation": {}
    },
    {
        "label": "SliceError",
        "kind": 6,
        "importPath": "termgfx.textures",
        "description": "termgfx.textures",
        "peekOfCode": "class SliceError(Exception): pass\nclass REPEAT_MODE(str, Enum):\n    INFINITE = \"INFINITE\"\n    FINITE = \"FINITE\"\n    DISABLE = \"DISABLE\"\nclass Image:\n    def __init__(self, size: Vector2, initial_color: Optional[Color] = None):\n        self.width = int(size.x)\n        self.height = int(size.y)\n        if initial_color is None:",
        "detail": "termgfx.textures",
        "documentation": {}
    },
    {
        "label": "REPEAT_MODE",
        "kind": 6,
        "importPath": "termgfx.textures",
        "description": "termgfx.textures",
        "peekOfCode": "class REPEAT_MODE(str, Enum):\n    INFINITE = \"INFINITE\"\n    FINITE = \"FINITE\"\n    DISABLE = \"DISABLE\"\nclass Image:\n    def __init__(self, size: Vector2, initial_color: Optional[Color] = None):\n        self.width = int(size.x)\n        self.height = int(size.y)\n        if initial_color is None:\n            initial_color = Color(\"RGB\", [0, 0, 0])",
        "detail": "termgfx.textures",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "termgfx.textures",
        "description": "termgfx.textures",
        "peekOfCode": "class Image:\n    def __init__(self, size: Vector2, initial_color: Optional[Color] = None):\n        self.width = int(size.x)\n        self.height = int(size.y)\n        if initial_color is None:\n            initial_color = Color(\"RGB\", [0, 0, 0])\n        # NumPy array for RGB\n        self.dataArray = np.full((self.height, self.width, 3),\n                                 [initial_color.r, initial_color.g, initial_color.b],\n                                 dtype=np.uint8)",
        "detail": "termgfx.textures",
        "documentation": {}
    },
    {
        "label": "Texture",
        "kind": 6,
        "importPath": "termgfx.textures",
        "description": "termgfx.textures",
        "peekOfCode": "class Texture:\n    def __init__(self, data: Color | Image, repeatMode: Optional[REPEAT_MODE] = None):\n        self.__repeat_mode__ = repeatMode\n        if isinstance(data, Color):\n            self.__size__ = Vector2(1, 1)\n            if self.__repeat_mode__ is None:\n                self.__repeat_mode__ = REPEAT_MODE.INFINITE\n            self.__met__ = np.full((1, 1, 3), [data.r, data.g, data.b], dtype=np.uint8)\n        elif isinstance(data, Image):\n            self.__size__ = Vector2(data.width, data.height)",
        "detail": "termgfx.textures",
        "documentation": {}
    },
    {
        "label": "Vector2",
        "kind": 6,
        "importPath": "termgfx.vectors",
        "description": "termgfx.vectors",
        "peekOfCode": "class Vector2:\n    def __init__(self, x: float = 0.0, y: float = 0.0):\n        self.x = x\n        self.y = y\n    def __add__(self, other: 'Vector2') -> 'Vector2':\n        return Vector2(self.x + other.x, self.y + other.y)\n    def __sub__(self, other: 'Vector2') -> 'Vector2':\n        return Vector2(self.x - other.x, self.y - other.y)\n    def __mul__(self, scalar: float) -> 'Vector2':\n        if isinstance(scalar, float):",
        "detail": "termgfx.vectors",
        "documentation": {}
    },
    {
        "label": "render_sphere_ascii",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def render_sphere_ascii(width=80, height=80, radius=1.0, light_dir=(1, -1, 1), light_strength=1):\n    W, H = width, height\n    zbuffer = [[-1e9 for _ in range(W)] for __ in range(H)]\n    colors: list[list[termgfx.Color]] = [[termgfx.Color(\"RGB\", [0,0,0]) for _ in range(W)] for __ in range(H)]\n    lx, ly, lz = light_dir\n    lnorm = math.sqrt(lx*lx + ly*ly + lz*lz)\n    lx, ly, lz = lx/lnorm, ly/lnorm, lz/lnorm\n    lat_steps = int(80*radius)\n    lon_steps = int(160*radius)\n    for i in range(lat_steps+1):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def update(size: termgfx.Vector2):\n    global Iframe\n    # Iframe += 1\n    light_dir = (\n        math.cos(Iframe/10 * 0.7),\n        -0.5 + 0.25 * math.sin(Iframe/10 * 0.3),\n        math.sin(Iframe/10 * 0.9)\n    )\n    # radius behaves naturally now\n    frame = render_sphere_ascii(",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Iframe",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "Iframe = 10\n# --- Profile it ---\ntotal_calls = []\ntotal_times = []\nthreadCounts = []\nfor threadCount in range(50):\n    profiler = cProfile.Profile()\n    profiler.enable()\n    renderer = termgfx.ConsoleRenderer(update, threadCount=threadCount+1)\n    renderer.showFrame()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "total_calls",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "total_calls = []\ntotal_times = []\nthreadCounts = []\nfor threadCount in range(50):\n    profiler = cProfile.Profile()\n    profiler.enable()\n    renderer = termgfx.ConsoleRenderer(update, threadCount=threadCount+1)\n    renderer.showFrame()\n    profiler.disable()\n    # --- Extract only total time and call count ---",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "total_times",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "total_times = []\nthreadCounts = []\nfor threadCount in range(50):\n    profiler = cProfile.Profile()\n    profiler.enable()\n    renderer = termgfx.ConsoleRenderer(update, threadCount=threadCount+1)\n    renderer.showFrame()\n    profiler.disable()\n    # --- Extract only total time and call count ---\n    s = io.StringIO()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "threadCounts",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "threadCounts = []\nfor threadCount in range(50):\n    profiler = cProfile.Profile()\n    profiler.enable()\n    renderer = termgfx.ConsoleRenderer(update, threadCount=threadCount+1)\n    renderer.showFrame()\n    profiler.disable()\n    # --- Extract only total time and call count ---\n    s = io.StringIO()\n    ps = pstats.Stats(profiler, stream=s).strip_dirs().sort_stats(\"cumulative\")",
        "detail": "main",
        "documentation": {}
    }
]